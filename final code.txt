//final code
#include <Keypad.h>
#include <Servo.h>

// Servo motor setup
Servo servo;

// Ultrasonic sensor pins
#define TRIG_PIN 11
#define ECHO_PIN 12

// Passive buzzer pin
#define BUZZER_PIN 13

// Keypad setup
const byte ROWS = 4; // 4 rows
const byte COLS = 4; // 4 columns
char keys[ROWS][COLS] = {
  {'1', '2', '3', 'A'},
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', 'D'}
};
byte rowPins[ROWS] = {2, 3, 4, 5}; // Row pins
byte colPins[COLS] = {6, 7, 8, 9}; // Column pins
Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);

// Define the password
String correctPassword = "48A4";
String enteredPassword = "";

// State variables
bool isPasswordCorrect = false;

void setup() {
  servo.attach(10);         // Servo connected to Pin 10
  servo.write(0);           // Servo initial position
  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);
  pinMode(BUZZER_PIN, OUTPUT);
  Serial.begin(9600);       // Initialize Serial Monitor
  Serial.println("System Ready");
}

void loop() {
  char key = keypad.getKey(); // Read keypad input

  // Handle keypad input
  if (key) {
    if (key == '#') { // Submit password
      if (enteredPassword == correctPassword) {
        Serial.println("Password Correct!");
        isPasswordCorrect = true; // Unlock the system
      } else {
        Serial.println("Incorrect Password!");
        triggerAlarm(); // Trigger the buzzer for incorrect password
        isPasswordCorrect = false;
      }
      enteredPassword = ""; // Clear entered password
    } else if (key == '*') { // Clear input
      enteredPassword = "";
      Serial.println("Input Cleared");
    } else {
      enteredPassword += key; // Append key to the entered password
      Serial.println(enteredPassword);
    }
  }

  // If the password is correct, check distance and operate the servo
  if (isPasswordCorrect) {
    long distance = getDistance(); // Measure the distance
    if (distance > 0 && distance < 20) { // Check if distance is less than 20 cm
      Serial.println("Proximity Detected! Moving Servo...");
      operateServo(); // Operate the servo
      isPasswordCorrect = false; // Reset after operation
    } else {
      Serial.print("Distance too far: ");
      Serial.print(distance);
      Serial.println(" cm");
    }
  }
}

// Function to measure distance using the ultrasonic sensor
long getDistance() {
  digitalWrite(TRIG_PIN, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIG_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);

  long duration = pulseIn(ECHO_PIN, HIGH);
  long distance = (duration * 0.034) / 2; // Convert duration to cm
  Serial.print("Distance: ");
  Serial.print(distance);
  Serial.println(" cm");
  return distance;
}

// Function to operate the servo
void operateServo() {
  servo.write(90); // Move the servo to 90 degrees
  delay(2000);     // Wait for 2 seconds
  servo.write(0);  // Reset the servo to 0 degrees
}

// Function to trigger the alarm
void triggerAlarm() {
  Serial.println("Triggering Alarm...");
  for (int i = 0; i < 5; i++) { // Beep 5 times for incorrect password
    tone(BUZZER_PIN, 1000); // Generate a 1 kHz tone
    delay(200);             // Beep for 200 ms
    noTone(BUZZER_PIN);     // Stop the tone
    delay(200);             // Pause for 200 ms
  }
}
